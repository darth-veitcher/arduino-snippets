{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#arduino-snippets","title":"Arduino Snippets","text":"<p>Experiments and associated documentation for working with arduinos.</p>"},{"location":"sensors/AHT10/aht10-temp-humidity/","title":"AHT10","text":""},{"location":"sensors/AHT10/aht10-temp-humidity/#aht10-temperature-and-humidity-sensor","title":"AHT10 Temperature and Humidity Sensor","text":"<p>This device can be found AHT10 High Precision Digital Temperature and Humidity Sensor Measurement Module I2C Communication Replace DHT11 SHT20 AM2302 and at time of purchase cost \u00a30.56 per item.</p> <p></p> Breadboard Sketch <p></p> Arduino Code <p>The below code snippet will read the temperature and humidity from the sensor every 10 seconds and print it to serial.</p> <p>You'll need to have the following libraries installed:</p> INI<pre><code>[env:nodemcuv2]\nplatform = espressif8266\nboard = nodemcuv2\nframework = arduino\nmonitor_speed = 115200\nlib_deps =\nadafruit/Adafruit AHTX0@^2.0.5\n</code></pre> C++<pre><code>#include &lt;Arduino.h&gt;\n#define LED_BUILTIN D4  // Pin D4 or GPIO2 work. We could use LED_BUILTIN for other platforms. See https://arduino.stackexchange.com/a/38979\n#include &lt;Adafruit_AHTX0.h&gt;\nint setBuiltInDiode(int state);\n// intialise the DHT sensor and global variables to update in loop\nulong last_updated = 0;\nconst long update_interval = 10000;  // 10secs\nAdafruit_AHTX0 aht10;\nsensors_event_t humidity, temp;\nvoid setup() {\n// open the serial port at 115200 bps:\nSerial.begin(115200);\n// initialize LED digital pin as an output.\npinMode(LED_BUILTIN, OUTPUT);\n// start the sensor\naht10.begin();\n}\nvoid loop() {\nSerial.println(\"Arduino has been running for \" + String(time(NULL)) + \" secs\");\nunsigned long currentMillis = millis();\nif (currentMillis - last_updated &gt;= update_interval) {\nif (uint(aht10.getStatus()) == 255) {\nSerial.println(\"ERROR: Unable to connect to AHT sesor. Device offline.\");\n}\nelse {\nlast_updated = currentMillis;\naht10.getEvent(&amp;humidity, &amp;temp);\nSerial.println(\"Temp: \" + String(temp.temperature) + \" Humidity: \" + String(humidity.relative_humidity));\n}\nSerial.println(\"Sensor Status: \" + String(aht10.getStatus()));\n}\n// arithmatically flip between 1/0\nsetBuiltInDiode(1 - digitalRead(LED_BUILTIN));\ndelay(1000);\n}\nint setBuiltInDiode(int state) {\ndigitalWrite(LED_BUILTIN, state);\nreturn digitalRead(LED_BUILTIN);\n}\n</code></pre>"},{"location":"sensors/AHT10/aht10-temp-humidity/#connecting-to-mqtt-backend","title":"Connecting to MQTT Backend","text":"<p>Using the provided infra/docker-compose.yaml within this repository as an assumed target we are going to send temperature and humidity sensor data to a mosquitto MQTT backend to then be displayed in a Grafana interface.</p> <p>The below code will connect to the WiFi and then serialise to JSON the measurements before sending through the results to a specified MQTT broker.</p> docker-compose.yaml YAML<pre><code>version: '3'\nservices:\nmosquitto:\nimage: eclipse-mosquitto:latest\nrestart: always\nvolumes:\n- ./config/mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro\nports:\n- \"1883:1883\"\n- \"9001:9001\"\nnetworks:\n- iot\ninfluxdb:\nimage: influxdb:latest\nrestart: always\nuser: \"1000\"\nenvironment:\nDOCKER_INFLUXDB_INIT_MODE: setup\nDOCKER_INFLUXDB_INIT_USERNAME: admin\nDOCKER_INFLUXDB_INIT_PASSWORD: adminpassword\nDOCKER_INFLUXDB_INIT_ORG: cave\nDOCKER_INFLUXDB_INIT_BUCKET: arduino-bucket\nDOCKER_INFLUXDB_INIT_RETENTION: 1w\nDOCKER_INFLUXDB_INIT_ADMIN_TOKEN: c1b8aca2722167c15684409b7ad791607896c4c20be1fa0d3040e439fdd72747\nDOCKER_INFLUXDB_INIT_CLI_CONFIG_NAME: cave\nports:\n- \"8086:8086\"\nvolumes:\n- influxdb-data:/var/lib/influxdb2\n- influxdb-configs:/etc/influxdb2\nnetworks:\n- iot\ntelegraf:\nimage: telegraf:latest\nrestart: always\nuser: telegraf\nenvironment:\nINFLUX_TOKEN: c1b8aca2722167c15684409b7ad791607896c4c20be1fa0d3040e439fdd72747\nvolumes:\n- ./config/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro\ndepends_on:\n- influxdb\n- mosquitto\nnetworks:\n- iot\ngrafana:\nimage: grafana/grafana:latest\nrestart: always\nenvironment:\nGF_INSTALL_PLUGINS: grafana-mqtt-datasource\nports:\n- \"3000:3000\"\nvolumes:\n- ./config/grafana/grafana-provisioning:/etc/grafana/provisioning\n- grafana-data:/var/lib/grafana\nnetworks:\n- iot\nsensor_mocker:\nbuild:\ncontext: sensor_mocker\ndockerfile: Dockerfile\nimage: darthveitcher/sensor_mocker\ndepends_on:\n- mosquitto\nnetworks:\n- iot\nnetworks:\niot:\nvolumes:\ngrafana-data:\ninfluxdb-data:\ninfluxdb-configs:\n</code></pre> main.cpp C++<pre><code>#include &lt;Arduino.h&gt;\n#ifdef ESP8266\n#define LED_BUILTIN D4  // Pin D4 or GPIO2 work. We could use LED_BUILTIN for other platforms. See https://arduino.stackexchange.com/a/38979\n#include &lt;ESP8266WiFi.h&gt;\n#else\n#include &lt;WiFi.h&gt;\n#endif\n#include &lt;Adafruit_AHTX0.h&gt;\n#include &lt;ArduinoJson.h&gt;\n#include &lt;WiFiClientSecure.h&gt;\n#include &lt;AsyncMqttClient.h&gt;\n/****** Device Identifiers and Topic *******/\nconst char* siteId = \"Mancave\";\nconst char* deviceId = \"desk\";\nconst char* mqtt_topic = \"home/mancave\";\n/****** WiFi Connection Details *******/\nconst char* ssid = \"IoT\";\nconst char* password = \"mysecretpassword\";\n/******* MQTT Broker Connection Details *******/\nconst char* mqtt_server = \"myserver-hostname.local\";\n// const char* mqtt_username = \"your_mqtt_client_username\";\n// const char* mqtt_password = \"your_mqtt_client_password\";\nconst int mqtt_port = 1883;\n/**** Secure WiFi Connectivity Initialisation *****/\nWiFiClientSecure espClient;\n/**** MQTT Client Initialisation *****/\nAsyncMqttClient mqttClient;\nunsigned long lastMsg = 0;\n#define MSG_BUFFER_SIZE (50)\nchar msg[MSG_BUFFER_SIZE];\n/************* Connect to WiFi ***********/\nvoid setup_wifi() {\ndelay(10);\nSerial.print(\"\\nConnecting to \");\nSerial.println(ssid);\nWiFi.mode(WIFI_STA);\nWiFi.begin(ssid, password);\nwhile (WiFi.status() != WL_CONNECTED) {\ndelay(500);\nSerial.print(\".\");\n}\nrandomSeed(micros());\nSerial.println(\"\\nWiFi connected\\nIP address: \");\nSerial.println(WiFi.localIP());\n}\n// Function Definitions\nint setBuiltInDiode(int state);\n// intialise the DHT sensor and global variables to update in loop\nulong last_updated = 0;\nconst long update_interval = 10000;  // 10secs\nAdafruit_AHTX0 aht10;\nsensors_event_t humidity, temp;\nvoid setup() {\n// open the serial port at 115200 bps:\nSerial.begin(115200);\n// initialize LED digital pin as an output.\npinMode(LED_BUILTIN, OUTPUT);\n// start the sensor\naht10.begin();\nsetup_wifi();\nmqttClient.setServer(mqtt_server, mqtt_port);\n}\nvoid loop() {\n// Serial.println(\"Arduino has been running for \" + String(time(NULL)) + \" secs\");\nwhile (!WiFi.isConnected()) {\nSerial.println(\"Waiting for WiFi ...\");\ndelay(1000);\n}\nmqttClient.connect();\nunsigned long currentMillis = millis();\nif (currentMillis - last_updated &gt;= update_interval) {\nif (uint(aht10.getStatus()) == 255) {\nSerial.println(\"ERROR: Unable to connect to AHT sesor. Device offline.\");\n}\nelse {\nlast_updated = currentMillis;\naht10.getEvent(&amp;humidity, &amp;temp);\nSerial.println(\"Temp: \" + String(temp.temperature) + \" Humidity: \" + String(humidity.relative_humidity));\n}\nSerial.println(\"Sensor Status: \" + String(aht10.getStatus()));\nDynamicJsonDocument doc(1024);\ndoc[\"deviceId\"] = deviceId;\ndoc[\"siteId\"] = siteId;\ndoc[\"humidity\"] = humidity.relative_humidity;\ndoc[\"temperature\"] = temp.temperature;\nchar mqtt_message[128];\nserializeJson(doc, mqtt_message);\nSerial.println(mqtt_message);\nmqttClient.publish(mqtt_topic, 1, true, mqtt_message);\n}\n// arithmatically flip between 1/0\nsetBuiltInDiode(1 - digitalRead(LED_BUILTIN));\ndelay(1000);\n}\nint setBuiltInDiode(int state) {\ndigitalWrite(LED_BUILTIN, state);\nreturn digitalRead(LED_BUILTIN);\n}\n</code></pre> <p></p>"}]}